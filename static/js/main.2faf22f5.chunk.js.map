{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","console","log","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updContact","match","params","put","NotFound","Test","title","body","fetch","then","response","json","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2faf22f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n      };\n    case 'ADD_CONTACT':\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case 'UPDATE_CONTACT':\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport class Provider extends Component {\n  state = {\n    contacts: [\n      // {\n      //   id: 1,\n      //   name: 'dfsfsdf',\n      //   email: 'sffsfsfsf',\n      //   phone: 'sdfsfsfsdf',\n      // },\n      // {\n      //   id: 2,\n      //   name: 'khkhk',\n      //   email: 'fghfghf',\n      //   phone: 'hjkhjkhk',\n      // },\n      // {\n      //   id: 3,\n      //   name: 'rtyryr',\n      //   email: 'rtyrtyrtyr',\n      //   phone: 'yrtyrtyrtyr',\n      // },\n    ],\n    dispatch: (action) => this.setState((state) => reducer(state, action)),\n  };\n\n  // componentWillMount() {\n  //   console.log('componentWillMount');\n  // }\n\n  // componentDidMount() {\n  //   console.log('componentDidMount');\n  //   axios.get('https://jsonplaceholder.typicode.com/users').then((res) =>\n  //     this.setState({\n  //       contacts: res.data,\n  //     })\n  //   );\n  // }\n  // for non arrow funciton use async at the front\n  async componentDidMount() {\n    console.log('componentDidMount');\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n    // await - wait for it to finish\n    this.setState({ contacts: res.data });\n  }\n\n  // componentWillUpdate() {\n  //   console.log('componentWillUpdate');\n  // }\n  // componentDidUpdate() {\n  //   console.log('componentDidUpdate');\n  // }\n\n  render() {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n\nexport const Consumer = Context.Consumer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\n// import './contact.css';\nimport { Link } from 'react-router-dom';\n\nexport default class Contact extends Component {\n  // static propTypes = {\n  //   name: PropTypes.string.isRequired,\n  //   email: PropTypes.string.isRequired,\n  //   phone: PropTypes.string.isRequired,\n  // };\n  // constructor() {\n  //   super();\n  //   this.state = {};\n  //   this.onShowClick = this.onShowClick.bind(this);\n  // }\n  state = {\n    showContactInfo: false,\n  };\n  // onDeleteClick = (id, dispatch) => {\n  //   // without api call it will only remove from dom\n  //   // dispatch({ type: 'DELETE_CONTACT', payload: id });\n  //   axios\n  //     .delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n  //     .then((res) => dispatch({ type: 'DELETE_CONTACT', payload: id }));\n  // };\n  // for non arrow funciton use async at before paramethers\n  onDeleteClick = async (id, dispatch) => {\n    // jsonplaceholder just gives an empty object in case of delete\n    // await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n    // dispatch({ type: 'DELETE_CONTACT', payload: id });\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    } catch (e) {\n      dispatch({ type: 'DELETE_CONTACT', payload: id });\n    }\n  };\n\n  // onShowClick() {\n  //   console.log(this.state);\n  // }\n  // no this binding is required or in the constructor if we use arrow function\n  // onShowClick = (e) => {\n  //   // console.log(e.target);\n  //   // state is immutable and thus do not mutate it directly\n  //   // this.state = { showContactInfo: false };\n  //   this.setState({ showContactInfo: !this.state.showContactInfo });\n  // };\n  // onShowClick = (name, e) => {\n  //   console.log(name);\n  // };\n\n  // componentWillReceiveProps(nextProps, nextState) {\n  //   console.log('componentWillReceiveProps');\n  //   console.log(nextProps, nextState);\n  // }\n\n  render() {\n    const { id, name, email, phone } = this.props.contact;\n    const { showContactInfo } = this.state;\n    // const { contact } = this.props;\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card card-body mb-3\">\n              <h4>\n                {name}{' '}\n                <i\n                  onClick={() =>\n                    this.setState({\n                      showContactInfo: !this.state.showContactInfo,\n                    })\n                  }\n                  className=\"fa fa-sort-down\"\n                  style={{ cursor: 'pointer' }}\n                />\n                <i\n                  className=\"fa fa-times\"\n                  style={{ cursor: 'pointer', float: 'right', color: 'red' }}\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\n                ></i>\n                <Link to={`contact/edit/${id}`}>\n                  <i\n                    className=\"fa fa-edit\"\n                    style={{\n                      cursor: 'pointer',\n                      float: 'right',\n                      color: 'black',\n                      marginRight: '1rem',\n                    }}\n                  ></i>\n                </Link>\n              </h4>\n\n              {showContactInfo ? (\n                <ul className=\"list-group\">\n                  <li className=\"list-goup-item\">Email:{email}</li>\n                  <li className=\"list-goup-item\">Phone:{phone}</li>\n                </ul>\n              ) : null}\n            </div>\n          );\n        }}\n      </Consumer>\n\n      // <div className=\"card card-body mb-3\">\n      //   {/* <h1>Contact Component</h1> */}\n      //   <h4>\n      //     {name}{' '}\n      //     <i\n      //       // onClick={this.onShowClick.bind(this, name)}\n      //       // onClick={this.onShowClick}\n      //       onClick={() =>\n      //         this.setState({ showContactInfo: !this.state.showContactInfo })\n      //       }\n      //       className=\"fa fa-sort-down\"\n      //       style={{ cursor: 'pointer' }}\n      //     />\n      //     <i\n      //       className=\"fa fa-times\"\n      //       style={{ cursor: 'pointer', float: 'right', color: 'red' }}\n      //       // onClick={() => this.props.deleteClickHandler()}\n      //       onClick={this.onDeleteClick}\n      //     ></i>\n      //   </h4>\n\n      //   {showContactInfo ? (\n      //     <ul className=\"list-group\">\n      //       <li className=\"list-goup-item\">Email:{email}</li>\n      //       <li className=\"list-goup-item\">Phone:{phone}</li>\n      //     </ul>\n      //   ) : null}\n\n      //   {/* <h4>{contact.name}</h4>\n      //   <ul className=\"list-group\">\n      //     <li className=\"list-goup-item\">Email:{contact.email}</li>\n      //     <li className=\"list-goup-item\">Phone:{contact.phone}</li>\n      //   </ul> */}\n      // </div>\n    );\n  }\n}\n\nContact.propTypes = {\n  // name: PropTypes.string.isRequired,\n  // email: PropTypes.string.isRequired,\n  // phone: PropTypes.string.isRequired,\n  contact: PropTypes.object.isRequired,\n  // deleteClickHandler: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport { Consumer } from '../../context';\n\nexport default class Contacts extends Component {\n  // state = {\n  //   contacts: [\n  //     {\n  //       id: 1,\n  //       name: 'dfsfsdf',\n  //       email: 'sffsfsfsf',\n  //       phone: 'sdfsfsfsdf',\n  //     },\n  //     {\n  //       id: 2,\n  //       name: 'khkhk',\n  //       email: 'fghfghf',\n  //       phone: 'hjkhjkhk',\n  //     },\n  //     {\n  //       id: 3,\n  //       name: 'rtyryr',\n  //       email: 'rtyrtyrtyr',\n  //       phone: 'yrtyrtyrtyr',\n  //     },\n  //   ],\n  // };\n  // no need to use constructor for states\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     contacts: [],\n  //   };\n  // }\n\n  // this is where context/redux are useful in multiple nested components\n  // deleteContact = (id) => {\n  //   console.log(id);\n  //   const { contacts } = this.state;\n  //   const newContacts = contacts.filter((contact) => contact.id !== id);\n  //   this.setState({ contacts: newContacts });\n  // };\n  render() {\n    return (\n      <Consumer>\n        {(value) => {\n          const { contacts } = value;\n          return (\n            <React.Fragment>\n              <h1 className=\"display-4 mb-2\">\n                <span className=\"text-danger\">Contact</span>\n              </h1>\n              {contacts.map((contact) => (\n                <Contact\n                  key={contact.id}\n                  contact={contact}\n                  // deleteClickHandler={this.deleteContact.bind(this, contact.id)}\n                />\n              ))}\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n\n    // const { contacts } = this.state;\n    // return (\n    //   // react fragment is pseudo element used when div not required\n    //   // <div>\n    //   <React.Fragment>\n    //     {contacts.map((contact) => (\n    //       // <h1 key={contact.id}>{contact.name}</h1>\n    //       <Contact\n    //         key={contact.id}\n    //         contact={contact}\n    //         // name={contact.name}\n    //         // email={contact.email}\n    //         // phone={contact.phone}\n    //         deleteClickHandler={this.deleteContact.bind(this, contact.id)}\n    //       />\n    //     ))}\n    //   </React.Fragment>\n    //   // </div>\n    // );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default function Header(props) {\n  const { branding } = props;\n  return (\n    // <div>\n    //   {/* <h1>Contact Manager</h1> */}\n    //   {/* <h1 style={{ color: 'red', fontSize: '50px' }}>{branding}</h1> */}\n    //   <h1 style={headingStyle}>{branding}</h1>\n    // </div>\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {branding}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              {/* <a href=\"/\" className=\"nav-link\">\n                Home\n              </a> */}\n              <Link to=\"/\" className=\"nav-link\">\n                <i className=\"fa fa-home\"></i>Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/contact/add\" className=\"nav-link\">\n                <i className=\"fa fa-plus\"></i>Add\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/about\" className=\"nav-link\">\n                <i className=\"fa fa-question\"></i>About\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nHeader.defaultProps = {\n  branding: 'My App',\n};\n\nHeader.propTypes = {\n  branding: PropTypes.string.isRequired,\n};\n\n// const headingStyle = {\n//   color: 'green',\n//   fontSize: '50px',\n// };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n  label,\n  name,\n  value,\n  placeholder,\n  type,\n  onChange,\n  error,\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        name={name}\n        //className=\"is-invalid form-control form-control-lg\"\n        className={classnames('form-control form-control-lg', {\n          'is-invalid': error,\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n      />\n      {error && <div className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextInputGroup.propTypes = {\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n};\n\nTextInputGroup.defaultProps = {\n  type: 'text',\n};\n\nexport default TextInputGroup;\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\n// import { v4 as uuid } from 'uuid';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\n// controlled component\nexport default class AddContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {},\n  };\n\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n  // onSubmit = (dispatch, e) => {\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    const { name, email, phone } = this.state;\n    if (name === '') {\n      this.setState({ errors: { name: 'name is required' } });\n      return;\n    }\n    if (email === '') {\n      this.setState({ errors: { email: 'email is required' } });\n      return;\n    }\n    if (phone === '') {\n      this.setState({ errors: { phone: 'phone is required' } });\n      return;\n    }\n    const newContact = {\n      // id: uuid(),\n      name,\n      email,\n      phone,\n    };\n    // dispatch({ type: 'ADD_CONTACT', payload: newContact });\n\n    // axios\n    //   .post('https://jsonplaceholder.typicode.com/users', newContact)\n    //   .then((res) => dispatch({ type: 'ADD_CONTACT', payload: res.data }));\n\n    const res = await axios.post(\n      'https://jsonplaceholder.typicode.com/users',\n      newContact\n    );\n    dispatch({ type: 'ADD_CONTACT', payload: res.data });\n\n    // clear state after addition\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {},\n    });\n\n    this.props.history.push('/');\n  };\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Add Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    value={name}\n                    placeholder=\"Enter Name\"\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={email}\n                    placeholder=\"Enter Email\"\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    value={phone}\n                    placeholder=\"Enter Phone\"\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  {/* <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      className=\"form-control form-control-lg\"\n                      placeholder=\"Enter Name\"\n                      value={name}\n                      onChange={this.onChange}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control form-control-lg\"\n                      placeholder=\"Enter Email\"\n                      value={email}\n                      onChange={this.onChange}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"phone\">Phone</label>\n                    <input\n                      type=\"text\"\n                      name=\"phone\"\n                      className=\"form-control form-control-lg\"\n                      placeholder=\"Enter Phone\"\n                      value={phone}\n                      onChange={this.onChange}\n                    />\n                  </div> */}\n                  <input\n                    type=\"submit\"\n                    value=\"Add Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n\n    // return (\n    //   <div className=\"card mb-3\">\n    //     <div className=\"card-header\">Add Contact</div>\n    //     <div className=\"card-body\">\n    //       <form onSubmit={this.onSubmit}>\n    //         <div className=\"form-group\">\n    //           <label htmlFor=\"name\">Name</label>\n    //           <input\n    //             type=\"text\"\n    //             name=\"name\"\n    //             className=\"text form-control form-control-lg\"\n    //             placeholder=\"Enter Name\"\n    //             value={name}\n    //             onChange={this.onChange}\n    //           />\n    //         </div>\n    //         <div className=\"form-group\">\n    //           <label htmlFor=\"email\">Email</label>\n    //           <input\n    //             type=\"email\"\n    //             name=\"email\"\n    //             className=\"text form-control form-control-lg\"\n    //             placeholder=\"Enter Email\"\n    //             value={email}\n    //             onChange={this.onChange}\n    //           />\n    //         </div>\n    //         <div className=\"form-group\">\n    //           <label htmlFor=\"phone\">Phone</label>\n    //           <input\n    //             type=\"text\"\n    //             name=\"phone\"\n    //             className=\"text form-control form-control-lg\"\n    //             placeholder=\"Enter Phone\"\n    //             value={phone}\n    //             onChange={this.onChange}\n    //           />\n    //         </div>\n    //         <input\n    //           type=\"submit\"\n    //           value=\"Add Contact\"\n    //           className=\"btn btn-light btn-block\"\n    //         />\n    //       </form>\n    //     </div>\n    //   </div>\n    // );\n  }\n}\n","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\n// controlled component\nexport default class EditContact extends Component {\n  state = {\n    name: '',\n    email: '',\n    phone: '',\n    errors: {},\n  };\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    const res = await axios.get(\n      `https://jsonplaceholder.typicode.com/users/${id}`\n    );\n    const contact = res.data;\n    this.setState({\n      name: contact.name,\n      email: contact.email,\n      phone: contact.phone,\n    });\n  }\n\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\n  // onSubmit = (dispatch, e) => {\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n    // console.log(this.state);\n    const { name, email, phone } = this.state;\n    if (name === '') {\n      this.setState({ errors: { name: 'name is required' } });\n      return;\n    }\n    if (email === '') {\n      this.setState({ errors: { email: 'email is required' } });\n      return;\n    }\n    if (phone === '') {\n      this.setState({ errors: { phone: 'phone is required' } });\n      return;\n    }\n\n    const updContact = {\n      // id: uuid(), // id is coming from the response\n      name,\n      email,\n      phone,\n    };\n\n    const { id } = this.props.match.params;\n    const res = await axios.put(\n      `https://jsonplaceholder.typicode.com/users/${id}`,\n      updContact\n    );\n    dispatch({ type: 'UPDATE_CONTACT', payload: res.data });\n\n    // clear state after addition\n    this.setState({\n      name: '',\n      email: '',\n      phone: '',\n      errors: {},\n    });\n\n    this.props.history.push('/');\n  };\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    value={name}\n                    placeholder=\"Enter Name\"\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={email}\n                    placeholder=\"Enter Email\"\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    value={phone}\n                    placeholder=\"Enter Phone\"\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n","import React from 'react';\n\nexport default function (props) {\n  return (\n    <div>\n      <h1 className=\"display-4\">About contact Manager</h1>\n      {/* <h1 className=\"display-4\">{props.match.params.id}</h1> */}\n      <p className=\"lead\">simple app to manage contacts</p>\n      <p className=\"text-secondary\">version 1.0.0</p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h1 className=\"display-4\">\n        <span className=\"text-danger\">404</span> page not found\n      </h1>\n      <p className=\"lead\">sorry, that page does not exist</p>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class Test extends Component {\n  // state = {\n  //   test: 'test',\n  // };\n  state = {\n    title: '',\n    body: '',\n  };\n  // no arrow function required as its a lifecycle method\n\n  // // react17 UNSAFE_componentWillMount() {\n  // componentWillMount() {\n  //   console.log('componentWillMount');\n  // }\n  componentDidMount() {\n    // http calls to an api to backend\n    // fetching data within component and storing in component state\n    // ajax calls\n    // console.log('componentDidMount');\n    fetch('https://jsonplaceholder.typicode.com/posts/1')\n      .then((response) => response.json())\n      // .then((json) => console.log(json));\n      .then((json) =>\n        this.setState({\n          title: json.title,\n          body: json.body,\n        })\n      );\n  }\n  // // react17 UNSAFE_componentWillUpdate() {\n  // componentWillUpdate() {\n  //   console.log('componentWillUpdate');\n  // }\n  componentDidUpdate() {\n    console.log('componentDidUpdate');\n  }\n\n  // // react17 UNSAFE_componentWillReceiveProps(nextProps, nextState) {\n  // componentWillReceiveProps(nextProps, nextState) {\n  //   // deprecated bcoz it works against async nature of react\n  //   // executed when a component recieve new properties\n  //   // usually used with redux when you have application level state in redux\n  //   // take it into a single component and map it as props\n  //   // turn a state into component props\n  //   // new one is getDerivedStateFromProps\n  //   console.log('componentWillReceiveProps');\n  //   console.log(nextProps, nextState);\n  // }\n\n  // static getDerivedStateFromProps(nextProps, nextState) {\n  //   console.log('getDerivedStateFromProps');\n  //   console.log(nextProps, nextState);\n  //   // return state from here\n  //   return { test: 'something' };\n  // }\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   // called before dom is updated\n  //   console.log('getDerivedStateFromProps');\n  //   console.log(prevProps, prevState);\n  //   return null;\n  // }\n\n  render() {\n    const { title, body } = this.state;\n    return (\n      <div>\n        <h1>Test Component</h1>\n        <h1>{title}</h1>\n        <p>{body}</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Contact from './components/contacts/Contact';\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\nimport { Provider } from './context';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\n// function App() {\n//   return <div className=\"App\"></div>;\n// }\n\nclass App extends Component {\n  render() {\n    // return React.createElement(\n    //   'div',\n    //   { className: 'App' },\n    //   React.createElement('h1', null, 'App Component')\n    // );\n    // const name = 'sumit';\n    // const showHello = true;\n    // const showMath = true;\n    // const n1 = 30;\n    // const n2 = 40;\n    // most variables will be coming either from states or proper in reality\n\n    // let math;\n    // if (showMath) {\n    //   math = (\n    //     <h4>\n    //       {n1}+{n2}={n1 + n2}\n    //     </h4>\n    //   );\n    // } else {\n    //   math = null;\n    // }\n    return (\n      <Provider>\n        {/* <Router basename={process.env.PUBLIC_URL}> */}\n        <Router>\n          <div className=\"App\">\n            {/* <h1>App Component</h1> */}\n            <Header branding=\"Contact Manager\" />\n            {/* <Header /> */}\n            <div className=\"container\">\n              {/* <Contact\n            name=\"Sumit Suman\"\n            email=\"abc@gmail.com\"\n            phone=\"555-555-5555\"\n          />\n          <Contact\n            name=\"Amit Suman\"\n            email=\"abc@gmail.com\"\n            phone=\"555-555-5555\"\n          /> */}\n              {/* <AddContact />\n              <Contacts /> */}\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contact/add\" component={AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component={EditContact} />\n                <Route exact path=\"/about\" component={About} />\n                <Route exact path=\"/test\" component={Test} />\n                <Route exact component={NotFound} />\n                {/* <Route exact path=\"/about/:id\" component={About} /> */}\n              </Switch>\n            </div>\n            {/* {showHello ? <h4>Hello {name.toUpperCase()}</h4> : null}\n        {math} */}\n            {/* <label htmlFor=\"name\">Name</label> */}\n            {/* <input type=\"text\" /> */}\n            {/* <br /> */}\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}